import telebot
import config

from telebot import types
from api import get_exchangerate

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    help_button = types.KeyboardButton('üÜò –ü–æ–º–æ—â—å')
    start_button = types.KeyboardButton('üåé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç')
    exchange_button = types.KeyboardButton('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É')
    keyboard.add(start_button, exchange_button, help_button)
    sticker = open('img/sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b>! \n –Ø - <b>{bot.get_me().first_name}</b>, —Å–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç!", parse_mode="html", reply_markup=keyboard)
    bot.delete_message(message.chat.id, message.message_id)


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Mulpe')
    bot.delete_message(message.chat.id, message.message_id)


@bot.message_handler(content_types=['text'])
def text_handler(message):
    if message.chat.type == 'private':
        if message.text == 'üÜò –ü–æ–º–æ—â—å' or message.text.lower() == '–ø–æ–º–æ—â—å':
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Mulpe')
            bot.delete_message(message.chat.id, message.message_id)
        elif message.text == 'üåé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç' or message.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç':
            markup = types.InlineKeyboardMarkup()
            usd_to_rub_button = types.InlineKeyboardButton('USD/RUB', callback_data='USD to RUB')
            eur_to_rub_button = types.InlineKeyboardButton('EUR/RUB', callback_data='EUR to RUB')
            usd_to_eur_button = types.InlineKeyboardButton('USD/EUR', callback_data='USD to EUR')
            another_currency_button = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –≤–∞–ª—é—Ç—ã', callback_data='Another')
            markup.add(usd_to_rub_button, eur_to_rub_button, usd_to_eur_button, another_currency_button)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã', reply_markup=markup)
        elif message.text == 'üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É' or message.text.lower() == '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É':
            sent2 = bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∑–∞—Ç–µ–º –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—É–º–º—É.\n<b>–ü—Ä–∏–º–µ—Ä: USD RUB 100</b>', parse_mode='html')
            bot.register_next_step_handler(sent2, exchange)
        else:
            bot.send_message(message.chat.id, '–Ø —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –∑–Ω–∞—é, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥: /start, /help, –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.')


@bot.callback_query_handler(func=lambda call: call.data == 'USD to RUB')
def usd_to_rub(call):
    bot.send_message(call.message.chat.id, f'1 USD  ----->  {get_exchangerate('USD', 'RUB')} RUB')


@bot.callback_query_handler(func=lambda call: call.data == 'EUR to RUB')
def eur_to_rub(call):
    bot.send_message(call.message.chat.id, f'1 EUR  ----->  {get_exchangerate('EUR', 'RUB')} RUB')


@bot.callback_query_handler(func=lambda call: call.data == 'USD to EUR')
def usd_to_eur(call):
    bot.send_message(call.message.chat.id, f'1 USD  ----->  {get_exchangerate('USD', 'EUR')} EUR')


@bot.callback_query_handler(func=lambda call: call.data == 'Another')
def another_currency(call):
    sent = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –≤–∞–ª—é—Ç—ã. <b>–ü—Ä–∏–º–µ—Ä: USD RUB</b>\n<b>–í–Ω–∏–º–∞–Ω–∏–µ‚ùó</b> –ù–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≤–∏–¥–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤–∞–ª—é—Ç (USD, RUB, EUR, CNY –∏ —Ç.–¥.)', parse_mode='html')
    bot.register_next_step_handler(sent, reply_to_value)


def reply_to_value(message):
    banknotes = message.text
    banknotes_list = banknotes.split()
    bot.send_message(message.chat.id, f'1 {banknotes_list[0]}  ----->  {get_exchangerate(banknotes_list[0], banknotes_list[1])} {banknotes_list[1]}')


def exchange(message):
    banknotes_and_amount = message.text
    banknotes_and_amount_list = banknotes_and_amount.split()
    currency = get_exchangerate(banknotes_and_amount_list[0], banknotes_and_amount_list[1])
    res = currency * int(banknotes_and_amount_list[2])
    bot.send_message(message.chat.id, f'{banknotes_and_amount_list[2]} {banknotes_and_amount_list[0]}  ----->  {res} {banknotes_and_amount_list[1]}')


bot.polling(none_stop=True)
